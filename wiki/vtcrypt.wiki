#summary vt-crypt documentation.
#labels java,crypto,bouncycastle

= Introduction =
VT Crypt is a high level Java cryptograhic library that meets the following design goals:
 # Flexible JCE provider.  Prefers the [http://www.bouncycastle.org/java.html Bouncy Castle Java Provider], but can fall back to other providers defined in the environment for algorithms not implemented by BC.
 # Ease of use for common cryptographic operations.  A one liner highlights this well; the following prints the MD5 hash of a password as a string of HEX characters:  {{{System.out.println(new MD5().digest(passBytes, new HexConverter()));}}}
 # Convenient and performant handling of cryptographic operations on large data streams.
 # Support for base-64 and hexadecimal encoding of ciphertext input/output.
 # Support for I/O operations on cryptographic primitives including generating and writing symmetric encryption keys, public/private key pairs, and X.509 certificates.  Both PEM and DER encoding is handled conveniently.
 # Command line interface for each class of cryptographic operation (digest, symmetric encryption, public-key encryption, message signing, etc).  A command line interface for keystore operations is also included, which is notable as it supports features above and beyond the the Java [http://java.sun.com/j2se/1.5.0/docs/tooldocs/solaris/keytool.html keytool] utility.

It is important to note that no cryptographic algorithms are implemented; [http://www.bouncycastle.org/java.html Bouncy Castle] provides all cryptographic algorithms where required.

= Installation =
The latest version can be downloaded at:

If you would like to use this project in your maven build, include the following in your pom.xml:
{{{
...
<repositories>
  <repository>
    <id>vt-middleware.repo</id>
    <url>http://vt-middleware.googlecode.com/svn/maven2</url>
  </repository>
</repositories>
...
}}}

If you would like to use this project's maven plugin, include the following in your pom.xml:
{{{
...
<pluginRepositories>
  <pluginRepository>
    <id>vt-middleware.repo</id>
    <url>http://vt-middleware.googlecode.com/svn/maven2</url>
  </pluginRepository>
</pluginRepositories>
...
}}}

= Code Samples =
Unless otherwise noted, classes appearing in the following samples are included in the JSE libraries or VT Crypt.

== Hashing ==
Generate the MD5 hash of a password.  The result is a string of hexadecimal characters as is the common use case for password verification.
{{{
String hash = new MD5().digest(Convert.toBytes(passChars), new HexConverter());
}}}

Compute the SHA-1 fingerprint of a file, which produces a string of colon-delimited hex bytes, 1A:2B:3C... as is common with fingerprint utilities.  Note the {{{true}}} argument to the HexConverter constructor that causes colon-delimited bytes to be produced in the hexadecimal output string.
{{{
String fingerprint = null;
InputStream in = new BufferedInputStream(new FileInputStream(new File(big-file.txt)));
try {
  fingerprint = new SHA1().digest(in, new HexConverter(true));
} finally {
  in.close();
}
}}}

= Scripts =