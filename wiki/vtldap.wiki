#labels java,ldap,jndi
#sidebar vtldapSidebar

<wiki:toc max_depth="2" />

= Introduction =
VT Ldap is a Java library for interfacing with version 3 LDAPs.
This library meets the following design goals:
 # Easy and flexible to configure. Configuration can be done with a properties file located on your classpath or via Spring.
 # Ease of use for common ldap operations. Searching, comparing, adding, and replacing all require only a few lines of code.
 # Automatic connection handling. Timed out connections automatically retry and TLS/SSL is negotiated transparently.
 # Support for sasl external operations. Digest-MD5, CRAM-MD5, GSSAPI, and SASL external are all supported.
 # Command line interface for common operations.

----
= Installation =
The latest version can be downloaded from the [http://code.google.com/p/vt-middleware/downloads/list downloads] page.

If you would like to use this project in your maven build, include the following in your pom.xml:
{{{
...
<repositories>
  <repository>
    <id>vt-middleware.repo</id>
    <url>http://vt-middleware.googlecode.com/svn/maven2</url>
  </repository>
</repositories>
...
}}}

----
= Code Samples =
Unless otherwise noted, classes appearing in the following samples are included in the JSE libraries or VT Ldap.

== Searching ==

=== Compare ===
Perform a compare on the entry 'uid=818037,ou=People,dc=vt,dc=edu', checking for an attribute value of 'mail=dfisher@vt.edu'
{{{
Ldap ldap = new Ldap(new LdapConfig("ldap://directory.vt.edu:389", "ou=People,dc=vt,dc=edu"));
if (ldap.compare("uid=818037,ou=People,dc=vt,dc=edu", "mail=dfisher@vt.edu")) {
  System.out.println("Compare succeeded");
} else {
  System.out.println("Compare failed");
}
}}}

=== Subtree search ===
Perform a search for 'sn=Fisher' and output all attributes in LDIF format to System.out.
{{{
Ldap ldap = new Ldap(new LdapConfig("ldap://directory.vt.edu:389", "ou=People,dc=vt,dc=edu"));
(new Ldif()).outputLdif(ldap.search("sn=Fisher"), System.out);
}}}

=== Attribute search ===
Perform a search for all entries containing an attribute matching 'mail=dfisher@vt.edu', and output the attributes 'sn' and 'givenName' in DSMLv1 format to System.out.
{{{
Ldap ldap = new Ldap(new LdapConfig("ldap://directory.vt.edu:389", "ou=People,dc=vt,dc=edu"));
(new Dsmlv1()).outputDsml(ldap.searchAttributes(new BasicAttributes("mail", "dfisher@vt.edu"), new String[]{"sn", "givenName"}), System.out);
}}}

== Authentication ==
Authenticate a user whose entry resides in the 'ou=People' branch of the ldap.
TLS is required for all connections and the username must equal the attribute value of the attributes 'uid' or 'mail'.
{{{
AuthenticatorConfig config = new AuthenticatorConfig("ldap://authn.directory.vt.edu", "ou=People,dc=vt,dc=edu");
config.setTls(true);
config.setUserField(new String[]{"uid", "mail"}); // attribute to search for user with
Authenticator auth = new Authenticator(config);
auth.useTls(true);
if (auth.authenticate(user, credential)) {
  System.out.println("Authentication succeeded");
} else {
  System.out.println("Authentication failed");
}
}}}

Same example as above, but also authorize the user on 'eduPersonAffiliation'.
{{{
AuthenticatorConfig config = new AuthenticatorConfig("ldap://authn.directory.vt.edu", "ou=People,dc=vt,dc=edu");
config.setTls(true);
config.setUserField(new String[]{"uid", "mail"}); // attribute to search for user with
Authenticator auth = new Authenticator(config);
auth.useTls(true);
if (auth.authenticate(user, credential, "eduPersonAffiliation=staff")) {
  System.out.println("Authentication/Authorization succeeded");
} else {
  System.out.println("Authentication/Authorization failed");
}
}}}

== Pooling ==
Create a new soft limit pool, accepting all the default configuration properties. Check a ldap object out from the pool, perform a search, and return the object to the pool.
{{{
DefaultLdapFactory factory = new DefaultLdapFactory(new LdapConfig("ldap://directory.vt.edu:389", "ou=People,dc=vt,dc=edu"));
SoftLimitLdapPool pool = new SoftLimitLdapPool(factory);
pool.initialize()
Ldap ldap = null;
try {
  ldap = pool.checkOut();
  ...
  Iterator<SearchResult> i = ldap.search("givenName=Daniel", new String[]{"uid", "mail"});
  ...
} finally {
  pool.checkIn(ldap);
}
...
pool.close();
}}}

----
= Configuration Properties =
The Ldap and Authenticator objects can be configured from a properties file. This is useful for maintaining a ldap configuration outside of your source code. Simply create a file called _ldap.properties_ and place it in your root classpath.
{{{
Ldap ldap = new Ldap();
ldap.loadFromProperties();
}}}
If you prefer to use a different filename and/or classpath location:
{{{
Ldap ldap = new Ldap();
ldap.loadFromProperties("/classpath/to/your/propertiesFile");
}}}

== Properties ==
Any property provided that does not match the following property names is placed directly into the JNDI context. This allows the user to provide ad-hoc environment properties.

=== Context Properties ===
Properties injected directly into the JNDI context.
|| *Property Name* || *Default Value* || *Description* ||
|| edu.vt.middleware.ldap.contextFactory || com.sun.jndi.ldap.LdapCtxFactory || fully qualified class name of the context factory that JNDI should use ||
|| edu.vt.middleware.ldap.sslSocketFactory || _none_ || fully qualified class name which implements javax.net.ssl.SSLSocketFactory; will be used for all TLS/SSL connections ||
|| edu.vt.middleware.ldap.hostnameVerifier || _none_ || fully qualified class name which implements javax.net.ssl.HostnameVerifier; will be used for all TLS connections ||
|| edu.vt.middleware.ldap.ldapUrl || _none_ || fully qualified URL to the ldap. e.g. ldap://directory.vt.edu:389 ||
|| edu.vt.middleware.ldap.timeout || -1 || the amount of time in milliseconds that connect operations will block; a value of -1 means use the network timeout value ||
|| edu.vt.middleware.ldap.authoritative || false || whether authoritative responses are accepted from DNS servers ||
|| edu.vt.middleware.ldap.batchSize || -1 || the batch size to use when returning results; a value of -1 means use no batch size ||
|| edu.vt.middleware.ldap.dnsUrl || _none_ || the DNS url to use for hostname resolution ||
|| edu.vt.middleware.ldap.language || _none_ || the preferred language ||
|| edu.vt.middleware.ldap.referral || _none_ || specifies how referrals should be handled; must be one of 'throw', 'ignore', or 'follow' ||
|| edu.vt.middleware.ldap.derefAliases || _none_ || specifies how aliases should be handled; must be one of 'always', 'never', 'finding', or 'searching' ||
|| edu.vt.middleware.ldap.binaryAttributes || _none_ || space delimited list of attributes which should be treated as binary; e.g. userSMIMECertificate jpegPhoto ||
|| edu.vt.middleware.ldap.saslAuthorizationId || _none_ || entity for which access control checks should be made if the authentication succeeds ||
|| edu.vt.middleware.ldap.saslRealm || _none_ || identifies the realm or domain from which the principal name should be chosen ||
|| edu.vt.middleware.ldap.typesOnly || false || only return attribute type names ||
|| edu.vt.middleware.ldap.ssl || false || whether SSL should be used for LDAP connections ||
|| edu.vt.middleware.ldap.tls || false || whether TLS should be used for LDAP connections ||

=== Search Properties ===
Properties used for connecting, binding, and searching.
|| *Property Name* || *Default Value* || *Description* ||
|| edu.vt.middleware.ldap.base || _none_ || base dn used for operations ||
|| edu.vt.middleware.ldap.serviceUser || _none_ || dn to bind as before performing operations ||
|| edu.vt.middleware.ldap.serviceCredential || _none_ || credential for the service user ||
|| edu.vt.middleware.ldap.authtype || simple || LDAP authentication mechanism; must be one of 'none', 'simple', 'strong', 'DIGEST-MD5', 'CRAM-MD5', 'GSSAPI', or 'EXTERNAL' ||
|| edu.vt.middleware.ldap.ignoreCase || true || whether to ignore case in attribute names ||
|| edu.vt.middleware.ldap.operationRetry || 1 || specifies the number of times an operation will be retried if a CommunicationException occurs when an operation is attempted ||
|| edu.vt.middleware.ldap.logCredentials || false || whether bind credentials should be logged; logging occurs at debug level ||

=== !SearchControl Properties ===
Properties that map to: [http://java.sun.com/j2se/1.5.0/docs/api/javax/naming/directory/SearchControls.html javax.naming.directory.SearchControls]
|| *Property Name* || *Default Value* || *Description* ||
|| edu.vt.middleware.ldap.searchScope || SUBTREE (2) || specifies the scope of searches; must be one of OBJECT (0), ONELEVEL (1), or SUBTREE (2) ||
|| edu.vt.middleware.ldap.timeLimit || 0 || the amount of time in milliseconds that search operations will block; a value of 0 means blocking indefinitely ||
|| edu.vt.middleware.ldap.countLimit || 0 || the maximum number of entries that search operations will return; a value of 0 means return all results ||
|| edu.vt.middleware.ldap.derefLinkFlag || false || whether links will be dereferenced during the search ||
|| edu.vt.middleware.ldap.returningObjFlag || false || whether objects will be returned as part of the result ||

=== Authenticator Properties ===
Properties used specifically for authentication.
All the previous properties are inherited by the Authenticator and can be overridden as necessary.
|| *Property Name* || *Default Value* || *Description* ||
|| edu.vt.middleware.ldap.auth.userField || uid || LDAP attribute which contains the user identifier to search on; supports a comma delimited list for multiple values ||
|| edu.vt.middleware.ldap.auth.constructDn || false || whether the authentication dn should be constructed or looked up in the LDAP; a constructed dn takes the form: userField=user,baseDn  ||
|| edu.vt.middleware.ldap.auth.subtreeSearch || false  || whether the authentication dn should be searched for over the entire base; default value is onelevel  ||
|| edu.vt.middleware.ldap.auth.authorizationFilter || _none_ || ldap filter to use for performing authorization after successful authentication  ||

----
= Scripts =
Script execution requirements vary by platform.  For the following platform-specific instructions, let VTLDAP_HOME be the location where the VT Ldap distribution was unpacked.

*Unix*
 # Ensure the java executable is on your path.
 # Ensure $VTLDAP_HOME/bin is on your path.
 # If you encounter classpath problems executing the scripts, export VTLDAP_HOME as a separate shell variable.  This is not necessary in most cases (e.g. Linux, OSX, FreeBSD).

== ldapsearch - Search Operations ==
Perform a subtree search for any entry containing 'mail=dfisher@vt.edu' and return the attributes givenName and sn in LDIF format.
{{{
ldapsearch -ldapUrl ldap://directory.vt.edu -base ou=People,dc=vt,dc=edu -query mail=dfisher@vt.edu givenName sn
}}}

== ldapauth - Authentication Operations ==
Authenticate a user using the 'mail' attribute. You will be prompted for username and credential. Note that your credential will be visible in your terminal.
{{{
ldapauth -ldapUrl ldap://authn.directory.vt.edu -base ou=People,dc=vt,dc=edu -tls true -userField mail
}}}