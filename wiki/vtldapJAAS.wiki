= Introduction =
This library provides a JAAS LoginModule for authentication and authorization against a LDAP.

----
= Configuration =
This configuration will authenticate a user using the 'uid' attribute and populate the user's principals with the values of the 'eduPersonAffiliation' attribute.
{{{
vt-ldap {
   edu.vt.middleware.ldap.jaas.LdapLoginModule required
     ldapUrl="ldap://authn.directory.vt.edu:389"
     base="ou=people,dc=vt,dc=edu"
     tls="true"
     userField="uid"
     userRoleAttribute="eduPersonAffiliation";
};
}}}

This configuration is the same as the previous except it will also populate the user's principals with value of the 'uugid' attribute found on any entries in the 'ou=Groups,dc=vt,dc=edu' branch which contain a member attribute value that includes this user's DN.
{{{
vt-ldap {
   edu.vt.middleware.ldap.jaas.LdapLoginModule required
     ldapUrl="ldap://authn.directory.vt.edu:389"
     base="ou=people,dc=vt,dc=edu"
     tls="true"
     userField="uid"
     roleBase="ou=groups,dc=vt,dc=edu"
     roleFilter="(member={0})"
     roleAttribute="uugid"
     userRoleAttribute="eduPersonAffiliation";
};
}}}

----
= Options =
Each option corresponds to a [vtldap#Configuration_Properties Ldap Property] without the domain prefix.<br/>
In addition each role option can be used to override any existing option.<br/>
For example, if you want to get your role data from a different host, simply set roleLdapUrl=“ldap://my.host.domain”.<br/>
There are 3 options which do not correspond to Ldap properties and those are explained below: 
|| *Property Name* || *Description* ||
|| roleFilter || An LDAP search filter where {0} is replaced with the user dn and {1} is replaced with the user. This is used to find roles for the user. ||
|| roleAttribute || An attribute(s) that exists on any role entries found with the roleFilter. The value(s) of these attributes will be added as roles for this user. Comma delimited for multiple attributes. ||
|| userRoleAttribute || An attribute(s) that exists on the user entry. The value(s) of these attributes will be added as roles for this user. Comma delimited for multiple attributes. ||

----
= Sample Code =
Once the `java.security.auth.login.config` property has been set, you can use the JAAS module with a LoginContext.

{{{
import javax.security.auth.login.LoginContext;
import com.sun.security.auth.callback.TextCallbackHandler;

LoginContext lc = new LoginContext("vt-ldap", new TextCallbackHandler());
lc.login()
}}}

----
= Tomcat Realm =
The JAAS module can be used as a Tomcat realm.<br/>

== Instructions ==
  # Put the vt-ldap jar in the Tomcat server classpath
  # Set the `java.security.auth.login.config` property to the location of your JAAS file
    * can be done by setting a shell environment variable or editing the bin/catalina.sh script
  # Add the realm declaration to the Tomcat server.xml file:
    {{{
      <Realm className="org.apache.catalina.realm.JAASRealm"
             appName="vt-ldap"
             userClassNames="edu.vt.middleware.ldap.jaas.LdapPrincipal"
             roleClassNames="edu.vt.middleware.ldap.jaas.LdapRole"/>
    }}}
    * note that appName must be the same as the declaration in your JAAS file.
  # Configure your web.xml to use your LDAP roles:
    {{{
        <security-constraint>
          <web-resource-collection>
            <web-resource-name>My webapp</web-resource-name>
            <url-pattern>/*</url-pattern>
          </web-resource-collection>
          <auth-constraint>
             <role-name>staff</role-name>
          </auth-constraint>
        </security-constraint>
    }}}
  # Restart tomcat
