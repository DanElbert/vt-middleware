#labels java,password
#sidebar vtpasswordSidebar

<wiki:toc max_depth="2" />

= Introduction =
VT Password is a Java library for verifying that a password meets a define ruleset.<br/>
This library includes the following rule implementations:
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/CharacterCharacteristicRule.html CharacterCharacteristicRule] - Does a password contain the desired mix of character types
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/DictionaryRule.html DictionaryRule] - Does a password match a word in a dictionary
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/DictionarySubstringRule.html DictionarySubstringRule] - Does a password contain a word in a dictionary
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/DigitCharacterRule.html DigitCharacterRule] - Does a password contain a digit
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/HistoryRule.html HistoryRule] - Does a password match a previous password, supports hashes
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/LengthRule.html LengthRule] - Is a password of a certain length
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/LowercaseCharacterRule.html LowercaseCharacterRule] - Does a password contain a lowercase character
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/NonAlphanumericCharacterRule.html NonAlphanumericCharacterRule] - Does a password contain a non-alphanumeric character
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/SequenceRule.html SequenceRule] - Does a password contain a keyboard sequence
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/SourceRule.html SourceRule] - Does a password match the password from another system or source
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/UppercaseCharacterRule.html UppercaseCharacterRule] - Does a password contain an uppercase character
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/UsernameRule.html UsernameRule] - Does a password contain a username
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-3.0/edu/vt/middleware/password/WhitespaceRule.html WhitespaceRule] - Does a password contain whitespace

----
= Installation =
The latest version can be downloaded from the [http://code.google.com/p/vt-middleware/downloads/list downloads] page.

This project is available from Maven Central. If you would like to use this project in your maven build, include the following in your pom.xml:
{{{
<dependencies>
  <dependency>
      <groupId>edu.vt.middleware</groupId>
      <artifactId>vt-password</artifactId>
      <version>3.0</version>
  </dependency>
<dependencies>
}}}

----
= Code Samples =
Unless otherwise noted, classes appearing in the following samples are included in the JSE libraries or VT Password.

{{{
// password must be between 8 and 16 chars long
LengthRule lengthRule = new LengthRule(8, 16);

// don't allow whitespace
WhitepaceRule whitespaceRule = new WhitespaceRule();

// control allowed characters
CharacterCharacteristicsRule charRule = new CharacterCharacteristicsRule();
// require at least 1 digit in passwords
charRule.getRules().add(new DigitCharacterRule(1));
// require at least 1 non-alphanumeric char
charRule.getRules().add(new NonAlphanumericCharacterRule(1));
// require at least 1 upper case char
charRule.getRules().add(new UppercaseCharacterRule(1));
// require at least 1 lower case char
charRule.getRules().add(new LowercaseCharacterRule(1));
// require at least 3 of the previous rules be met
charRule.setNumberOfCharacteristics(3);

// don't allow keyboard sequences
SequenceRule seqRule = new SequenceRule();
// ignore case when looking for sequences
seqRule.setIgnoreCase(true);

// group all rules together in a RuleList
RuleList ruleList = new RuleList();
ruleList.getRules().add(lengthRule);
ruleList.getRules().add(whitespaceRule);
ruleList.getRules().add(charRule);
ruleList.getRules().add(seqRule);

PasswordData passwordData = new PasswordData(new Password("testpassword"));

RuleResult result = PasswordValidator.validate(ruleList, passwordData);
if (result.isValid()) {
  System.out.println("Valid password");
} else {
  System.out.println("Invalid password:");
  for (RuleResultDetail rrd : result.getDetails()) {
    System.out.println(rrd.getMessage());
  }
}
}}}

== Using a dictionary ==
Using a dictionary requires using the [vtdictionary vt-dictionary] library.
{{{
// create a case sensitive word list and sort it
ArrayWordList awl = WordLists.createFromReader(
  new FileReader[] {new FileReader("/path/to/dictionary")},
  true,
  new ArraysSort());

// create a dictionary for searching
WordListDictionary dict = new WordListDictionary(awl);

DictionarySubstringRule dictRule = new DictionarySubstringRule(dict);
dictRule.setWordLength(4); // size of words to check in the password
dictRule.setMatchBackwards(true); // match dictionary words backwards

PasswordData passwordData = new PasswordData(new Password("testpassword"));

RuleResult result = PasswordValidator.validate(dictRule, passwordData);
if (result.isValid()) {
  System.out.println("Valid password");
} else {
  System.out.println("Invalid password:");
  for (RuleResultDetail rrd : result.getDetails()) {
    System.out.println(rrd.getMessage());
  }
}
}}}

== Using password history ==
Using password history requires using the [vtcrypt vt-crypt] library if hashed passwords are used.<br/>
Typically password history would be retrieved from a datasource.<br/>
This example uses an array for simplicity.
{{{
String passwd = "testpassword";

// base64 encoded, SHA-1 passwords
String[] history = new String[] {
  "MwRLPWHiwj49VmNSmTsSBeFECqk=",
  "EqCiqolu0z8+T+5COOSO/+XfTCA=",
  "V0DGHz3umagyKKAbbFEbpfByzsQ=",
};

HistoryRule historyRule = new HistoryRule();
historyRule.setDigest("SHA-1", new Base64Converter());

PasswordData passwordData = new PasswordData(new Password("testpassword"));
passwordData.setPasswordHistory(Arrays.asList(history));

RuleResult result = PasswordValidator.validate(historyRule, passwordData);
if (result.isValid()) {
  System.out.println("Valid password");
} else {
  System.out.println("Invalid password:");
  for (RuleResultDetail rrd : result.getDetails()) {
    System.out.println(rrd.getMessage());
  }
}
}}}

== Generating passwords ==
Password suggestions can be generated to meet a list of !CharacterRule.
{{{
// create a password generator
PasswordGenerator generator = new PasswordGenerator();

// create character rules to generate passwords with
List<CharacterRule> rules = new ArrayList<CharacterRule>();
rules.add(new DigitCharacterRule(1));
rules.add(new NonAlphanumericCharacterRule(1));
rules.add(new UppercaseCharacterRule(1));
rules.add(new LowercaseCharacterRule(1));

// generate 5 passwords, each 8 characters long
List<String> passwords = new ArrayList<String>();
for (int i = 0; i < 5; i++) {
  passwords.add(generator.generatePassword(8, rules));
}
}}}

_Thanks to Sean Sullivan for this implemenation_

----
= Scripts =
Script execution requirements vary by platform.  For the following platform-specific instructions, let VTPASS_HOME be the location where the VT Password distribution was unpacked.

*Unix*
 # Ensure the java executable is on your path.
 # Ensure $VTPASS_HOME/bin is on your path.
 # If you encounter classpath problems executing the scripts, export VTPASS_HOME as a separate shell variable.  This is not necessary in most cases (e.g. Linux, OSX, FreeBSD).

== password - Checker Operations ==
Check a password has the following qualities:
  * length >= 8
  * length <= 16
  * contains at least 1 digit
  * contains at least 1 non-alphanumeric
  * contains at least 1 uppercase

{{{
bin/password 'T#sting01' -l 8 16 -c 1 0 1 1 0 3
}}}

Print command-line usage statement
{{{
bin/password -h
}}}