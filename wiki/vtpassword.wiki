#labels java,password
#sidebar vtpasswordSidebar

<wiki:toc max_depth="2" />

= Introduction =
VT Password is a Java library for verifying that a password meets a define ruleset.<br/>
This library includes the following predefined rules:
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-2.0.2/edu/vt/middleware/password/PasswordCharacterRule.html PasswordCharacterRule] - Does a password contain the desired mix of character types
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-2.0.2/edu/vt/middleware/password/PasswordDictionaryRule.html PasswordDictionaryRule] - Does a password match a word in a dictionary
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-2.0.2/edu/vt/middleware/password/PasswordHistoryRule.html PasswordHistoryRule] - Does a password match a previous password, supports hashes
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-2.0.2/edu/vt/middleware/password/PasswordLengthRule.html PasswordLengthRule] - Is a password of a certain length
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-2.0.2/edu/vt/middleware/password/PasswordSequenceRule.html PasswordSequenceRule] - Does a password contain a keyboard sequence
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-2.0.2/edu/vt/middleware/password/PasswordSourceRule.html PasswordSourceRule] - Does a password match the password from another system or source
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-2.0.2/edu/vt/middleware/password/PasswordUserIDRule.html PasswordUserIDRule] - Does a password contain a userid
  * [http://vt-middleware.googlecode.com/svn/vt-password/javadoc/vt-password-2.0.2/edu/vt/middleware/password/PasswordWhitespaceRule.html PasswordWhitespaceRule] - Does a password contain whitespace

----
= Installation =
The latest version can be downloaded from the [http://code.google.com/p/vt-middleware/downloads/list downloads] page.

If you would like to use this project in your maven build, include the following in your pom.xml:
{{{
<dependencies>
  <dependency>
      <groupId>edu.vt.middleware</groupId>
      <artifactId>vt-passsword</artifactId>
      <version>2.0.2</version>
  </dependency>
<dependencies>
}}}
{{{
<repositories>
  <repository>
    <id>vt-middleware.repo</id>
    <url>http://vt-middleware.googlecode.com/svn/maven2</url>
  </repository>
</repositories>
}}}

----
= Code Samples =
Unless otherwise noted, classes appearing in the following samples are included in the JSE libraries or VT Password.

{{{
String passwd = "testpassword";

// password must be between 8 and 16 chars long
PasswordLengthRule lengthRule = new PasswordLengthRule(8, 16);

// don't allow whitespace
PasswordWhitepaceRule whitespaceRule = new PasswordWhitespaceRule();

// control allowed characters
PasswordCharacterRule charRule = new PasswordCharacterRule();
charRule.setNumberOfDigits(1); // require at least 1 digit in passwords
charRule.setNumberOfNonAlphanumeric(1); // require at least 1 non-alphanumeric char
charRule.setNumberOfUpperCase(1); // require at least 1 upper case char
charRule.setNumberOfLowerCase(1); // require at least 1 lower case char
charRule.setNumberOfCharacteristics(3); // require at least 3 of the previous rules be met

// don't allow keyboard sequences
PasswordSequenceRule seqRule = new PasswordSequenceRule();
seqRule.ignoreCase(); // ignore case when looking for sequences
 
PasswordChecker checker = new PasswordChecker();
checker.addPasswordRule(lengthRule);
checker.addPasswordRule(whitespaceRule);
checker.addPasswordRule(charRule);
checker.addPasswordRule(seqRule);
try {
  checker.checkPassword(new Password(passwd));
  // password passed check
} catch (PasswordException e) {
  // password failed check
}
}}}

== Using a dictionary ==
Using a dictionary requires using the [vtdictionary vt-dictionary] library.<br/>
For best performance the dictionary file should be sorted and built from it's median.
{{{
String passwd = "testpassword";
String dictFile = "/path/to/dictionary";

Dictionary dict = new Dictionary();
dict.useMedian();
dict.ignoreCase();
dict.insert(new File(dictFile));
dict.build();

PasswordDictionaryRule dictRule = new PasswordDictionaryRule(dict);
dictRule.setNumberOfCharacters(4); // size of words to check in the password
dictRule.matchBackwards(); // match dictionary words backwards

PasswordChecker checker = new PasswordChecker();
checker.addPasswordRule(dictRule);
try {
  checker.checkPassword(new Password(passwd));
  // password passed check
} catch (PasswordException e) {
  // password failed check
}
}}}

== Using password history ==
Typically password history would be retrieved from a datasource.<br/>
This example uses an array for simplicity.
{{{
String passwd = "testpassword";

// base64 encoded, SHA-1 passwords
String[] history = new String[] {
  "MwRLPWHiwj49VmNSmTsSBeFECqk=",
  "EqCiqolu0z8+T+5COOSO/+XfTCA=",
  "V0DGHz3umagyKKAbbFEbpfByzsQ=",
};

PasswordHistoryRule historyRule = new PasswordHistoryRule();
historyRule.useDigest("SHA-1", new Base64Converter());
historyRule.addHistory(history);

PasswordChecker checker = new PasswordChecker();
checker.addPasswordRule(historyRule);
try {
  checker.checkPassword(new Password(passwd));
  // password passed check
} catch (PasswordException e) {
  // password failed check
}
}}}

== Generating passwords ==
Password suggestions can be generated to meet a !PasswordCharacterRule.
{{{
// create a password generator
PasswordGenerator generator = new PasswordGenerator();

// create a character rule to generate passwords with
PasswordCharacterRule rule = new PasswordCharacterRule();
rule.setNumberOfDigits(1);
rule.setNumberOfNonAlphanumeric(1);
rule.setNumberOfUppercase(1);
rule.setNumberOfLowercase(1);
rule.setNumberOfCharacteristics(3);

// generate 5 passwords, each 8 characters long
List<String> passwords = new ArrayList<String>();
for (int i = 0; i < 5; i++) {
  passwords.add(generator.generatePassword(8, rule));
}
}}}

_Thanks to Sean Sullivan for this implemenation_

----
= Scripts =
Script execution requirements vary by platform.  For the following platform-specific instructions, let VTPASS_HOME be the location where the VT Password distribution was unpacked.

*Unix*
 # Ensure the java executable is on your path.
 # Ensure $VTPASS_HOME/bin is on your path.
 # If you encounter classpath problems executing the scripts, export VTPASS_HOME as a separate shell variable.  This is not necessary in most cases (e.g. Linux, OSX, FreeBSD).

== password - Checker Operations ==
Check a password has the following qualities:
  * length >= 8
  * length <= 16
  * contains at least 1 digit
  * contains at least 1 non-alphanumeric
  * contains at least 1 uppercase

{{{
bin/password 'T#sting01' -l 8 16 -c 1 0 1 1 0 3
}}}

Print command-line usage statement
{{{
bin/password -h
}}}